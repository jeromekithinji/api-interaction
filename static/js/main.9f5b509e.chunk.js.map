{"version":3,"sources":["components/KanyeQuote/KanyeQuote.jsx","components/PokeBall/PokeBall.jsx","components/Pokemon/Pokemon.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["KanyeQuote","useState","yeQuote","setYeQuote","getYeQuote","fetch","then","response","json","jsonResponse","catch","err","console","log","useEffect","className","quote","class","id","type","for","onClick","PokeBall","Pokemon","heading","types","name","abilities","ability","sprites","back_default","pokemon","setPokemon","Math","floor","random","searchQuery","setSearchQuery","getPokemon","event","preventDefault","error","species","capitaliseFirstLetter","str","charAt","toUpperCase","slice","getPokemonName","getPokemonImage","img","onSubmit","onInput","target","value","toLowerCase","placeholder","src","front_default","alt","weight","isNaN","toFixed","convertHectogramsToPounds","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSA0CeA,EAvCI,WACf,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAGMC,EAAa,WACfC,MAAM,2BACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAkBN,EAAWM,MAClCC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OAOpC,OAJAG,qBAAU,WACNV,MACD,IAGC,sBAAKW,UAAU,QAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,mBAAGA,UAAU,cAAb,SAA4Bb,EAAUA,EAAQc,MAAQ,KAEtD,uBAAMC,MAAM,OAAZ,UACI,sBAAMA,MAAM,cACZ,uBAAMA,MAAM,iBAAZ,UACI,mCACA,gDAEJ,uBAAMA,MAAM,cAAZ,UACI,uBAAOC,GAAG,eAAeC,KAAK,aAC9B,uBAAOC,IAAI,eAAX,6BAIZ,wBAAQL,UAAU,cAAcM,QAASjB,EAAzC,kCCbGkB,G,MAlBE,WACb,OACJ,sBAAKL,MAAM,iBAAX,UACE,sBAAKA,MAAM,iBAAX,UACE,qBAAKA,MAAM,yBACX,qBAAKA,MAAM,0BACX,qBAAKA,MAAM,SACX,qBAAKA,MAAM,cACX,qBAAKA,MAAM,YACX,qBAAKA,MAAM,qBACX,qBAAKA,MAAM,qBACZ,qBAAKA,MAAM,sBAEZ,qBAAKA,MAAM,qCCiGEM,G,MA9GC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEf,EAA8BvB,mBAAS,CACnCwB,MAAO,CAAC,CAAEN,KAAM,CAAEO,KAAM,MACxBC,UAAW,CAAC,CAAEC,QAAS,CAAEF,KAAM,MAC/BG,QAAS,CAAEC,aAAc,MAH7B,mBAAOC,EAAP,KAAgBC,EAAhB,KAOA,EAAsC/B,mBAClCgC,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,GAD5C,mBAAOC,EAAP,KAAoBC,EAApB,KAQMC,EAAa,SAACC,GACZA,GAAOA,EAAMC,iBAEjB,IACQJ,GACA/B,MAAM,qCAAD,OAAsC+B,IACtC9B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHuB,EAAWvB,MAEdC,OAAM,SAAC+B,GAAD,OAAW7B,QAAQC,IAAI4B,MAExC,MAAO9B,GACLC,QAAQ6B,MAAM9B,KAGtBG,qBAAU,WACNwB,OAGJ,IAWwBnB,EAEGuB,EAbrBC,EAAwB,SAACC,GAAD,OAC1BA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,IAStCC,EAAiB,SAACtB,GAAD,OAAWA,EAAOiB,EAAsBjB,GAAQ,IAKjEuB,EAAkB,SAACC,GAAD,OAAUA,GAAY,IAE9C,OACI,0BAASnC,UAAU,UAAnB,UACI,oBAAIA,UAAU,mBAAd,SAAkCS,IAClC,cAAC,EAAD,IACA,uBAAMT,UAAU,gBAAgBoC,SAAUb,EAA1C,UACI,uBACInB,KAAK,OACLJ,UAAU,sBACVqC,QAjDI,SAACb,GAAD,OAChBF,EAAeE,EAAMc,OAAOC,MAAMC,gBAiDtBC,YAAY,0BAEhB,uBACIrC,KAAK,SACLJ,UAAU,qBACVuC,MAAM,cAId,sBAAKvC,UAAU,eAAf,UACI,qBAAKA,UAAU,SAAf,SACI,6BAAKiC,EAAejB,EAAQL,UAGhC,sBAAKX,UAAU,gBAAf,UACI,qBACI0C,IAAKR,EAAgBlB,EAAQF,QAAQ6B,eACrCC,IAAKX,EAAejB,EAAQL,QAEhC,qBACI+B,IAAKR,EAAgBlB,EAAQF,QAAQC,cACrC6B,IAAKX,EAAejB,EAAQL,WAGpC,qBAAKX,UAAU,eAAf,SACI,6BAtCW2B,EAuCYX,EAAQJ,UAAU,GAAGC,QAAQF,KAtChEgB,EAAU,YAAcC,EAAsBD,GAAW,QAyCjD,sBAAK3B,UAAU,eAAf,UACI,sBAAKA,UAAU,cAAf,UACI,6BAAKgB,EAAQb,KACb,+CAEJ,sBAAKH,UAAU,oBAAf,UACI,+BAlDII,EAkDiBY,EAAQN,MAAM,GAAGN,KAAKO,KAjD3DP,EAAO,SAAWwB,EAAsBxB,GAAQ,MAkDhC,2CA3Dc,SAACyC,GAC/B,IAAKC,MAAMD,GACP,OAAiB,QAATA,GAAmBE,QAAQ,GA0DVC,CAA0BhC,EAAQ6B,QAAS,IADxD,wBChFTI,MAlBf,WAQI,OACI,sBAAKjD,UAAU,MAAf,UACI,cAAC,EAAD,IACA,qBAAKG,GAAG,QACR,cAAC,EAAD,CAASM,QAAQ,SCLdyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9f5b509e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./KanyeQuote.scss\";\n\nconst KanyeQuote = () => {\n    const [yeQuote, setYeQuote] = useState(\"\");\n\n    // when you call a fetch it returns a promise\n    const getYeQuote = () => {\n        fetch(\"https://api.kanye.rest/\")\n            .then((response) => response.json()) // returing response turned to json which also returns a promise\n            .then((jsonResponse) => setYeQuote(jsonResponse)) // taking the jsonified respose from last .then() and setting it to the local state\n            .catch((err) => console.log(err)); // error handling\n    };\n\n    useEffect(() => {\n        getYeQuote();\n    }, []); //invoke on page load, avoiding infinite loop\n\n    return (\n        <div className=\"tweet\">\n            <div className=\"tweet__container\">\n                <p className=\"tweet__text\">{yeQuote ? yeQuote.quote : \"\"}</p>\n                {/* Conditionally rendering response */}\n                <span class=\"user\">\n                    <span class=\"user__img\"></span>\n                    <span class=\"user__username\">\n                        <p>ye</p>\n                        <span>kanyewest</span>\n                    </span>\n                    <span class=\"tweet__like\">\n                        <input id=\"toggle-heart\" type=\"checkbox\" />\n                        <label for=\"toggle-heart\">❤</label>\n                    </span>\n                </span>\n            </div>\n            <button className=\"button__new\" onClick={getYeQuote}>\n                ♻ new tweet\n            </button>\n        </div>\n    );\n};\n\nexport default KanyeQuote;\n","import React from 'react'\nimport './PokeBall.scss';\n\n\nconst PokeBall = () => {\n    return (\n<div class=\"poke_container\">\n  <div class=\"pokeball  ball\">\n    <div class=\"pokeball_part_bottom\"></div>\n    <div class=\"pokeball_shadow  ball\"></div>\n    <div class=\"belt\"></div>\n    <div class=\"belt_loop\"></div>\n    <div class=\"belt_bg\"></div>\n    <div class=\"belt_loop_inside\"></div>\n    <div class=\"belt_loop_button\"></div>\n   <div class=\"pokeball_light\"></div>\n  </div>\n  <div class=\"pokeball_ground_shadow ball\"></div>\n</div>\n    )\n}\n\nexport default PokeBall\n","import React, { useState, useEffect } from \"react\";\nimport PokeBall from \"../PokeBall/PokeBall\";\nimport \"./Pokemon.scss\";\n\nconst Pokemon = ({ heading }) => {\n    // defining state with \"empty\" object to begin with\n    const [pokemon, setPokemon] = useState({\n        types: [{ type: { name: \"\" } }],\n        abilities: [{ ability: { name: \"\" } }],\n        sprites: { back_default: \"\" },\n    });\n\n    // loading input in search value, randomly generate one by default\n    const [searchQuery, setSearchQuery] = useState(\n        Math.floor(Math.random() * (151 - 1)) + 1\n    );\n\n    const handleInput = (event) =>\n        setSearchQuery(event.target.value.toLowerCase());\n\n    // fetching data from pokemon api in json response if found\n    const getPokemon = (event) => {\n        if (event) event.preventDefault();\n\n        try {\n            if (searchQuery) {\n                fetch(`https://pokeapi.co/api/v2/pokemon/${searchQuery}`)\n                    .then((response) => response.json())\n                    .then((jsonResponse) => {\n                        setPokemon(jsonResponse);\n                    })\n                    .catch((error) => console.log(error));\n            }\n        } catch (err) {\n            console.error(err);\n        }\n    };\n    useEffect(() => {\n        getPokemon();\n    });\n\n    const capitaliseFirstLetter = (str) =>\n        str.charAt(0).toUpperCase() + str.slice(1);\n\n    const convertHectogramsToPounds = (weight) => {\n        if (!isNaN(weight)) {\n            return (weight * 0.220462).toFixed(2);\n        }\n    };\n\n    // return name, type or image if found from api\n    const getPokemonName = (name) => (name ? capitaliseFirstLetter(name) : \"\");\n    const getPokemonType = (type) =>\n        type ? \"Type: \" + capitaliseFirstLetter(type) : \"\";\n    const getPokemonSpecies = (species) =>\n        species ? \"Species: \" + capitaliseFirstLetter(species) : \"\";\n    const getPokemonImage = (img) => (img ? img : \"\");\n\n    return (\n        <section className=\"pokemon\">\n            <h2 className=\"pokemon__heading\">{heading}</h2>\n            <PokeBall />\n            <form className=\"pokemon__form\" onSubmit={getPokemon}>\n                <input\n                    type=\"text\"\n                    className=\"pokemon_search-text\"\n                    onInput={handleInput}\n                    placeholder=\"Search for pokemon...\"\n                />\n                <input\n                    type=\"submit\"\n                    className=\"pokemon_search-btn\"\n                    value=\"Search\"\n                />\n            </form>\n\n            <div className=\"pokemon-card\">\n                <div className=\"header\">\n                    <h2>{getPokemonName(pokemon.name)}</h2>\n                    {/* <div>{getPokemonHp(pokemon.hp)}HP</div> */}\n                </div>\n                <div className=\"pokemon-image\">\n                    <img\n                        src={getPokemonImage(pokemon.sprites.front_default)}\n                        alt={getPokemonName(pokemon.name)}\n                    />\n                    <img\n                        src={getPokemonImage(pokemon.sprites.back_default)}\n                        alt={getPokemonName(pokemon.name)}\n                    />\n                </div>\n                <div className=\"pokemon-info\">\n                    <p>\n                        {getPokemonSpecies(pokemon.abilities[0].ability.name)}\n                    </p>\n                </div>\n                <div className=\"main-content\">\n                    <div className=\"national-id\">\n                        <h3>{pokemon.id}</h3>\n                        <p>National ID</p>\n                    </div>\n                    <div className=\"pokemon-abilities\">\n                        <div>{getPokemonType(pokemon.types[0].type.name)}</div>\n                        <div>\n                            Weight: {convertHectogramsToPounds(pokemon.weight)}{\" \"}\n                            lbs.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Pokemon;\n","import React from 'react';\nimport './App.scss';\nimport KanyeQuote from './components/KanyeQuote/KanyeQuote';\nimport Pokemon from './components/Pokemon/Pokemon';\n\nfunction App() {\n    // fetch - promises - then/catch \n    // 1. Setup some state for the fetch\n    // 2. Write a fetch function\n    // 3. Decide when to call the function\n    // 4. Probably us the data for something idk ...\n\n\n    return (\n        <div className=\"App\">\n            <KanyeQuote />\n            <div id=\"hr7\"></div>            \n            <Pokemon heading=\"\"/>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}